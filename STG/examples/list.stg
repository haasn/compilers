nil  = \     n c -> n ;
cons = \x xs n c -> c x xs ;

returnList = \x -> cons x nil ;

map = \f l -> l l (\x xs -> cons (f x) (map f xs)) ;

foldr = \f d l -> l d (\x xs -> f x (foldr f d xs)) ;

append = \x y -> foldr cons y x ;

concat = foldr append nil ;

repeat = \x -> fix (cons x) ;

-- :: Num a => [a] -> a
sum = \nD -> foldr (plus nD) (fromNat nD zero) ;

onetwothree = cons one (cons two (cons three nil)) ;

-- various class instances

FunctorList = Functor map ;
MonadList   = Monad returnList (bindFromJoin FunctorList concat) ;
MonoidList  = Monoid nil append ;

-- :: Monad m => [m a] -> m [a]
sequence  = \mD -> foldr (liftM2 mD cons) (return mD nil) ;
sequence_ = \mD -> foldr (seq mD) (return mD unit) ;

-- :: Monad m => (a -> m b) -> [m a] -> m [a]
mapM  = \mD f xs -> sequence  mD (map f xs) ;
mapM_ = \mD f xs -> sequence_ mD (map f xs) ;

-- :: Monad m => m a -> m ()
forever = \mD x -> sequence_ mD (repeat x) ;
